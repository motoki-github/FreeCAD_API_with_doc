
# Microsoftの開発コンテナから、Debian 'bookworm'ベースでPython 3.11を含むarm64アーキテクチャのイメージを使用します
FROM mcr.microsoft.com/devcontainers/python:3.11-bookworm

# パッケージインストール時のプロンプトを避けるために非対話モードを設定します
ENV DEBIAN_FRONTEND=noninteractive

# ログインスクリプトの実行を許可するシェルを指定します
SHELL ["/bin/bash", "-lc"]

# OpenCVの依存関係や一般的な開発ツールをインストールします
RUN apt-get update && apt-get install -y --no-install-recommends \
    # 汎用的な開発ツール
    git \
    curl \
    ca-certificates \
    build-essential \
    pkg-config \
    libxkbcommon-x11-0 \
    libxcb-cursor0 \
    libxcb-icccm4 \
    libxcb-image0 \
    libxcb-keysyms1 \
    libxcb-randr0 \
    libxcb-render-util0 \
    libxcb-xinerama0 \
    libxcb-xinput0 \
    libxrender1 \
    # locales fontconfig \
    # fonts-noto-cjk fonts-noto-cjk-extra fonts-noto-color-emoji \
    # && sed -i 's/^# *ja_JP.UTF-8 UTF-8/ja_JP.UTF-8 UTF-8/' /etc/locale.gen \
    # && locale-gen ja_JP.UTF-8 \
    # && update-locale LANG=ja_JP.UTF-8 LC_CTYPE=ja_JP.UTF-8 \
    # && fc-cache -fv \
    # イメージサイズを削減するために一時パッケージファイルをクリーンアップ
    && rm -rf /var/lib/apt/lists/*

# FreeCAD の Python モジュール場所を PYTHONPATH に追加
# Debian/Ubuntu 系では /usr/lib/freecad/lib に FreeCAD.so などが入ります
ENV PYTHONPATH="/usr/lib/freecad/lib:${PYTHONPATH}"

ENV LANG=C.UTF-8 \
    LC_ALL=C.UTF-8

# 'vscode'ユーザーに切り替えて以降のコマンドを実行
USER vscode

# 作業ディレクトリを'/workspaces/app'に設定
WORKDIR /workspaces/FreeCAD_API_with_doc

COPY requirements.txt ./requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

CMD ["/bin/bash"]